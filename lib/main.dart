import 'dart:async';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:logging/logging.dart';
import 'package:provider/provider.dart';

import 'core/theme/app_theme.dart';
import 'core/theme/theme_provider.dart';
import 'firebase_options.dart'; // This will be generated by flutterfire configure
import 'screens/auth/login_screen.dart';
import 'screens/couple_code/couple_code_screen.dart';
import 'screens/home/home_screen.dart';
import 'screens/profile/profile_screen.dart';
import 'screens/settings/settings_screen.dart';
import 'services/fcm_service.dart';
import 'services/notification_channel_handler.dart';

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print('Handling a background message: ${message.messageId}');
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Set up logging
  Logger.root.level = Level.ALL;
  Logger.root.onRecord.listen((record) {
    debugPrint('${record.level.name}: ${record.time}: ${record.message}');
  });

  final log = Logger('Main');

  try {
    // Initialize Firebase - MUST await this
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    log.info('Firebase initialized successfully');

    // Initialize Local Notifications
    await NotificationChannelHandler.initialize();
    log.info('Local notifications initialized successfully');

    // Initialize Connectivity
    final connectivity = Connectivity();
    await connectivity.checkConnectivity();
    log.info('Connectivity initialized successfully');

    // Initialize Firebase Auth
    FirebaseAuth.instance.setLanguageCode("en");
    log.info('Firebase Auth initialized');

    // Set up FCM
    FirebaseMessaging messaging = FirebaseMessaging.instance;
    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    print('User granted permission: ${settings.authorizationStatus}');

    // Get FCM token
    String? token = await messaging.getToken();
    print('FCM Token: $token');

    // Set up background message handler
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

    // Initialize notification channels for Android
    await NotificationChannelHandler.initialize();

    // Set up FCM service
    FCMService.initialize();

    // Set preferred orientations
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  } catch (e, stackTrace) {
    log.severe('Error initializing: $e');
    log.severe('Stack trace: $stackTrace');
  }

  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeProvider(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        return MaterialApp(
          title: 'WeSync',
          theme: AppTheme.lightTheme,
          darkTheme: AppTheme.darkTheme,
          themeMode: themeProvider.themeMode,
          home: StreamBuilder<User?>(
            stream: FirebaseAuth.instance.authStateChanges(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Scaffold(
                  body: Center(
                    child: CircularProgressIndicator(),
                  ),
                );
              }

              // Check if we're in dev mode
              final isDevMode = ModalRoute.of(context)?.settings.name == '/dev';

              if (snapshot.hasData) {
                return isDevMode ? const HomeScreen() : const HomeScreen();
              }

              return const LoginScreen();
            },
          ),
          routes: {
            '/login': (context) => const LoginScreen(),
            '/profile': (context) => const ProfileScreen(),
            '/couple-code': (context) => const CoupleCodeScreen(),
            '/dev': (context) => const HomeScreen(),
            '/test': (context) => const HomeScreen(),
            '/settings': (context) => const SettingsScreen(),
          },
          onUnknownRoute: (settings) {
            return MaterialPageRoute(
              builder: (context) => Scaffold(
                appBar: AppBar(
                  title: const Text('Error'),
                ),
                body: const Center(
                  child: Text('Page not found'),
                ),
              ),
            );
          },
        );
      },
    );
  }
}